AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Lambda application that calls the Lambda API.

Parameters:

  ProjectPrefix:
    AllowedPattern: >-
      ^[a-zA-Z0-9_-]*$
    Description: Project prefix used for naming resources E.g. dlp-uni-dev-aut2
    Type: String
    Default: arc-iam-dev
  apiGatewayName:
    Type: String
    Default: arc-iam-dev-apigw2
  apiGatewayHTTPMethod:
    Type: String
    Default: ANY

  apiGatewayStageName:
    Type: String
    Default: v1

  lambdaFunction1NameOauth:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: arc-iam-dev-lambda-oauth

  lambdaFunction2Name:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: arc-iam-dev-lambda2

Resources:

#  lambdafunction3:
#    type: aws::lambda::function
#    properties:
#      code:
#        zipfile: |
#          def handler(event,context):
#            return {
#              'body': 'hello there {0}'.format(event['requestcontext']['identity']['sourceip']),
#              'headers': {
#                'content-type': 'text/plain'
#              },
#              'statuscode': 200
#            }
#      description: example lambda function
#      functionname: "arc-iam-dev-lambda3-temp"
#      handler: index.handler
#      memorysize: 128
#      role: !getatt lambdaiamrole.arn
#      runtime: python3.8


  lambdaFunction1Oauth:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/distributions/oauth-adapter.zip
      Handler: example.Handler
      Runtime: java11
      Description: Java function
      MemorySize: 512
      Timeout: 120
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
      Tracing: Active
      FunctionName: !Ref lambdaFunction1NameOauth


  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  ResourceProxy:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      PathPart: '{proxy+}'

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: "ANY"
      Integration:
        IntegrationHttpMethod: "ANY"
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction1Oauth.Arn
      ResourceId: !Ref ResourceProxy
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

#  lambdaFunction2:
#    Type: AWS::Lambda::Function
#    Properties:
#      Code:
#        ZipFile: |
#          def handler(event,context):
#            return {
#              'body': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp']),
#              'headers': {
#                'Content-Type': 'text/plain'
#              },
#              'statusCode': 200
#            }
#      Description: Example Lambda function
#      FunctionName: !Ref lambdaFunction2Name
#      Handler: index.handler
#      MemorySize: 128
#      Role: !GetAtt lambdaIAMRole.Arn
#      Runtime: python3.8




  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunction1NameOauth}:*
          PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunction1NameOauth}
      RetentionInDays: 90



  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction1Oauth.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*"




